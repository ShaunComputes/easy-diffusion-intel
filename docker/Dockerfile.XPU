# https://intel.github.io/intel-extension-for-pytorch/xpu/1.13.120+xpu/tutorials/installation.html

#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================


# ============================================================================
# Ubuntu

FROM ubuntu:22.04
ENV LANG=C.UTF-8
ARG DEBIAN_FRONTEND=noninteractive
HEALTHCHECK NONE
RUN useradd -d /home/ipex -m -s /bin/bash ipex

RUN apt update
RUN apt install -y --no-install-recommends --fix-missing \
    apt-utils \
    build-essential \
    ca-certificates \
    clinfo \
    curl \
    git \
    gnupg2 \
    gpg-agent \
	libgl1 \
	libglib2.0-0 \
    rsync \
    sudo \
    unzip \
    wget


# ============================================================================
# Install Intel GPU driver

# Add the Intel repository signing key to the keyring
RUN wget -qO - https://repositories.intel.com/graphics/intel-graphics.key | \
  gpg --dearmor --output /usr/share/keyrings/intel-graphics.gpg

# Add the signed entry to APT sources and configure the APT client to use the Intel repository:
RUN echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/intel-graphics.gpg] https://repositories.intel.com/graphics/ubuntu focal main' | \
  tee -a /etc/apt/sources.list.d/intel.list

# Update the packages list and repository index.
RUN apt update

# Install the packages
ARG ICD_VER=23.05.25593.18-601~22.04
ARG LEVEL_ZERO_GPU_VER=1.3.25593.18-601~22.04
ARG LEVEL_ZERO_VER=1.9.4+i589~22.04
ARG LEVEL_ZERO_DEV_VER=1.9.4+i589~22.04
RUN apt-get install -y --no-install-recommends --fix-missing \
    intel-opencl-icd \
    intel-level-zero-gpu \
    level-zero \
    level-zero-dev \
    intel-media-va-driver-non-free libmfx1 libmfxgen1 libvpl2


# ============================================================================
# Install oneAPI Base Toolkit Packages

# Add the Intel repository signing key to the keyring
RUN wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | \
    gpg --dearmor | \
	tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null

# Add the signed entry to APT sources and configure the APT client to use the Intel repository:
RUN echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | \
    tee /etc/apt/sources.list.d/oneAPI.list

# Update the packages list and repository index.
RUN apt update

# Install the packages
#RUN apt install intel-basekit -y --no-install-recommends --fix-missing
ARG DPCPP_VER=2023.1.0-46305
ARG MKL_VER=2023.1.0-46342
RUN apt-get install -y --no-install-recommends --fix-missing \
    intel-oneapi-runtime-dpcpp-cpp=${DPCPP_VER} \
    intel-oneapi-runtime-mkl=${MKL_VER}

# A DPC++ compiler patch is required to use with oneAPI Basekit 2023.1.0
RUN cd /tmp && \
    wget https://registrationcenter-download.intel.com/akdlm/IRC_NAS/89283df8-c667-47b0-b7e1-c4573e37bd3e/2023.1-linux-hotfix.zip && \
    unzip 2023.1-linux-hotfix.zip && \
    cp 2023.1-linux-hotfix/libpi_level_zero.so /opt/intel/oneapi/lib/libpi_level_zero.so && \
    cp 2023.1-linux-hotfix/libpi_level_zero.so /opt/intel/opencl/libpi_level_zero.so 

ENV LD_LIBRARY_PATH=/opt/intel/oneapi/lib:/opt/intel/oneapi/lib/intel64:$LD_LIBRARY_PATH


# # ============================================================================
# # Install Python
# ARG PYTHON=python3.10
# 
# RUN apt-get update && apt-get install -y --no-install-recommends --fix-missing \
#     ${PYTHON} lib${PYTHON} python3-pip && \
#     apt-get clean && \
#     rm -rf  /var/lib/apt/lists/*
# 
# RUN pip --no-cache-dir install --upgrade \
#     pip \
#     setuptools
# 
# RUN ln -sf $(which ${PYTHON}) /usr/local/bin/python && \
#     ln -sf $(which ${PYTHON}) /usr/local/bin/python3 && \
#     ln -sf $(which ${PYTHON}) /usr/bin/python && \
#     ln -sf $(which ${PYTHON}) /usr/bin/python3
# 
# ARG TORCH_VERSION=1.13.0a0+git6c9b55e
# ARG TORCHVISION_VERSION=0.14.1a0+5e8e2f1
# ARG IPEX_VERSIONN=1.13.120+xpu
# ARG ONECCL_BIND_PT_VERSION="N/A"
# ARG TORCH_WHL_URL=https://developer.intel.com/ipex-whl-stable-xpu
# ARG IPEX_WHL_URL=https://developer.intel.com/ipex-whl-stable-xpu
# ARG TORCHVISION_WHL_URL=https://developer.intel.com/ipex-whl-stable-xpu
# ARG ONECCL_BIND_PT_WHL_URL="N/A"
# 
# RUN python -m pip install numpy
# 
# RUN python -m pip install torch==${TORCH_VERSION} -f ${TORCH_WHL_URL} && \
#     python -m pip install intel_extension_for_pytorch==${IPEX_VERSION} -f ${IPEX_WHL_URL} && \
#     python -m pip install torchvision==${TORCHVISION_VERSION} -f ${TORCHVISION_WHL_URL}
# RUN if [ ${ONECCL_BIND_PT_VERSION} != "N/A" ] && [ ${ONECCL_BIND_PT_WHL_URL} != "N/A" ]; then \
#         python -m pip install oneccl_bind_pt==${ONECCL_BIND_PT_VERSION} -f ${ONECCL_BIND_PT_WHL_URL}; \
#     fi


# ============================================================================
# Cleanup

RUN apt-get clean && \
    rm -rf  /var/lib/apt/lists/*


# ============================================================================
# Easy Diffusion

ADD scripts /easy-diffusion/scripts
ADD scripts/start.sh /easy-diffusion
ADD docker/config.json /easy-diffusion/scripts/config.json
